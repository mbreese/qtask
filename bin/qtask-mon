#!/usr/bin/env python
'''
Management script for tracking the status of jobs

Sends job results to a particular monitoring database/file. Supported types are:
text file, sqlite database, or an external webapp (URL). This is handled outside
of the pipeline job submission so that each pipeline (or set of jobs) can have
different monitoring outputs. For example, you may wish to track jobs submitted
with mqsub in a local SQLite database, but you may want to track a full pipeline
with a remote web-based method.
'''

import sys
import os

if os.path.exists(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'qtask')):
    sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))

import qtask.monitor

def usage():
    print __doc__
    print """Usage: qtask-mon monitor-uri [start|stop|abort|failed|account] jobid {values}

Possible monitor URI formats:
    file://filename.txt
    sqlite://sqlite.db
    http://hostname/qtask-mon

Extra values for "start":
    hostname

Extra values for "stop":
    return_code stdout_path stderr_path

Extra values for "account":
    key value


"""
    sys.exit(1)

if __name__ == '__main__':
    uri = None
    cmd = None
    jobid = None
    extra = []

    for arg in sys.argv[1:]:
        if not uri:
            uri = arg
        elif not cmd:
            cmd = arg
        elif not jobid:
            jobid = arg
        else:
            try:
                val = int(arg)
                extra.append(val)
            except:
                extra.append(arg)

    if not uri or not cmd or not jobid:
        usage()

    mon = qtask.monitor.load_monitor(uri)

    if not mon:
        sys.stderr.write("Could not open monitor target: %s!\n" % uri)
        usage()

    try:
        if cmd == 'submit':
            mon.submit(jobid, *extra)
        elif cmd == 'start':
            mon.start(jobid, *extra)
        elif cmd == 'stop':
            mon.stop(jobid, *extra)
        elif cmd == 'abort':
            mon.abort(jobid)
        elif cmd == 'failed':
            mon.failed(jobid)
        elif cmd == 'account':
            mon.accounting_value(jobid, *extra)
        else:
            sys.stderr.write('Unknown command: %s!\n\n' % cmd)

    finally:
        mon.close()
